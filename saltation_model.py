import numpy as np
from scipy.special import gamma
import matplotlib.pyplot as plt

def saltation_model(f, D, H, W, theta, r0, qb=None, D50=None, tau_c50=None, Q0=None, f0=None, vc0=None,
                    zeta=None, eta=None, v0=2206, z0=1000, alpha=0.272, rho_s=2700, rho_f=1000, g=9.81):
    '''
    This saltation model calculates PSD generated by bedload transport (Tsai et al., 2012), assuming
    all fluvial bedload particle impact vertically and elastically onto the riverbed.

    Args:
        f : Frequency window (Hz).
        D : Grain size diameter (m).
        H : Water depth (m).
        theta : channel slope (-).
        r0 : Source-receiver distance, which is the distance from the river thalweg to a seismic sensor (m).
        qb : bedload flux per unit width (m2/s)
        D50 : Median grain size diameter (m).
        tau_c50 : Dimentionless critical shear stress for incipient motion (of D50) (-).
        vc0 : Phase velocity at reference frequency (1Hz) (m/s).
        epsilon : frequency exponent (-)
        Q0 : Quality factor at reference frequency (1Hz) (-).
        eta : Quality factor exponent (-).

    Returns:
        Power-spectral density (PSD) of seismic velocity signal.
    '''
    if qb is None:
        qb = 1e-3 # m2/s
    if D50 is None:
        D50 = D
    if tau_c50 is None:
        dummy = 0.407 * np.log(142 * theta)
        # from Gimbert et al., 2014 implementation
        tau_c50 = np.exp(2.59e-2 * (dummy**4) + 8.94e-2 * (dummy**3) + 
                        0.142 * (dummy**2) + 0.41 * dummy - 3.14)
        
    if Q0 is None:
        Q0 = 20
    if f0 is None:
        f0 = 1 #Hz
    if vc0 is None:
        vc0 = ((2*np.pi*z0*f0)**(-alpha)*v0*gamma(1+alpha))**(1/(1-alpha)) #m/s

    if zeta is None:
        zeta = alpha/(1-alpha)
    if eta is None:
        eta = 0
    # Seismic velocities
    vc = vc0*(f/f0)**(-zeta)
    vu = vc/(1+zeta)

    f = np.asarray(f)
    Q = Q0 * (f/f0)**eta
    beta = 2 * np.pi*r0*(1+zeta)*f**(1+zeta-eta)/(vc0*Q0*f0**(zeta-eta))
    Chi = (2 * np.log(1 + 1/beta) * np.exp(-2 * beta) + 
           (1 - np.exp(-beta)) * np.exp(-beta) * np.sqrt(2 * np.pi / beta))
    
    # Bedload impact frequency model
    Vp = np.pi*D**3/6
    m = rho_s * Vp
    tau_c = tau_c50 * (D / D50)**(-0.9)  # critical shear stress

    if tau_c < 0.03:
        tau_c = 0.03
    if tau_c > 0.06:
        tau_c = 0.06

    R = (rho_s - rho_f) / rho_f
    u = np.sqrt(g * H * theta)
    tau = u**2 / R / g / D

    ks = 3 * D  # roughness scale (m)
    U = 8.1 * u * (H / ks)**1.6
    
    Ub = 1.56 * np.sqrt(R * g * D) * (tau/tau_c - 1)**0.56
    Hb = 1.44 * D * (tau / tau_c - 1)**0.50
    
    # Estimate cD from Dietrich 1982
    CSF = 0.8  # Corey Shape Factor (0.9: nearly spherical; 0.3: flat)
    P = 3.5    # 0: perfect angular; 6: perfect round (3.5 is typical roundness)
    nu = 1e-6
    D_star = (R * g * D**3) / nu**2
    D_star = np.log10(D_star)
    
    R1 = (-3.76715 + 1.92944 * D_star - 0.09815 * (D_star**2) - 
          0.00575 * (D_star**3) + 0.00056 * (D_star**4))
    
    R2 = (np.log10(1 - ((1 - CSF) / 0.85)) - (1 - CSF)**2.3 * 
          np.tanh(D_star - 4.6) + 0.3 * (0.5 - CSF) * (1 - CSF)**2 * 
          (D_star - 4.6))
    
    R3 = (0.65 - ((CSF / 2.83) * np.tanh(D_star - 4.6)))**(1 + ((3.5 - P) / 2.5))
    
    W_star = R3 * 10**(R1 + R2)
    
    # Estimate settling velocity from Dietrich 1982
    w_s = (W_star * R * g * nu)**(1/3)
    cD = (4 / 3) * (R * g * D) / (w_s**2)
    
    # Estimate terminal settling velocity ws
    wst = np.sqrt(4 * R * g * D / 3 / cD)  # interconnected with cD formula (inverse)
    Hb_c = 3 * cD * rho_f * Hb / (2 * rho_s * D * np.cos(np.radians(theta)))
    wi = wst * np.cos(np.radians(theta)) * np.sqrt(1 - np.exp(-Hb_c))  # from Lamb et al., 2008
    C1 = 2/3  # rise and fall time of a particle
    
    # Average settling velocity across the bedload layer (Tsai et al., 2012)
    ws = (Hb_c * wst * np.cos(np.radians(theta)) / 
          (2 * np.log(np.exp(Hb_c/2) + np.sqrt(np.exp(Hb_c) - 1))))
    
    hop_time = Hb / (C1 * ws)
    
    rate = C1 * W * qb * ws / (Vp * Ub * Hb)  # bedload model
    
    PSD = (rate * (np.pi**2 * m**2 * wi**2) / rho_s**2 * 
           f**3 / vc**3 / vu**2 * Chi)
    
    return PSD

if __name__ == "__main__":
    f = np.linspace(0.001, 20, 100)  # Frequency range from 0.1 to 100 Hz
    D = 0.3    # Grain diameter:  1cm
    H = 4.0       # Flow depth: 2 m
    W = 50
    theta = np.tan(1.4*np.pi/180)
    r0 = 600
    psd = saltation_model(f, D, H, W, theta, r0)
    psd_dB = 10*np.log10(psd)

    plt.figure(figsize=(10, 6))
    plt.plot(f, psd_dB)
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Power Spectral Density')
    plt.title('Saltation Mode Model - Sediment Transport PSD')
    plt.grid(True, alpha=0.3)
    plt.ylim(-170, -110)
    plt.show()
        

    


    